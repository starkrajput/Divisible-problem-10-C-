DIGITS = '0123456789'

TYPE_INT		= 'INT'
TYPE_FLOAT    = 'FLOAT'
TYPE_PLUS     = 'PLUS'
TYPE_MINUS    = 'MINUS'
TYPE_MULTIPLY      = 'MUL'
TYPE_DIV      = 'DIV'
TYPE_LPAREN   = 'LPAREN'
TYPE_RPAREN   = 'RPAREN'



class Lexer:
    def __init__(self, fn, text):
        self.fn = fn
        self.text = text
        self.pos = Position(-1, 0, -1, fn, text)
        self.current_char = None
        self.advance()
    
    def advance(self):
        self.pos.advance(self.current_char)
        self.current_char = self.text[self.pos.index] if self.pos.index < len(self.text) else None

    def make_tokens(self):
        tokens = []

        while self.current_char != None:
            if self.current_char in ' \t':
                self.advance()
            elif self.current_char in DIGITS:
                tokens.append(self.make_number())
            elif self.current_char == '+':
                tokens.append(Token(TYPE_PLUS))
                self.advance()
            elif self.current_char == '-':
                tokens.append(Token(TYPE_MINUS))
                self.advance()
            elif self.current_char == '*':
                tokens.append(Token(TYPE_MULTIPLY))
                self.advance()
            elif self.current_char == '/':
                tokens.append(Token(TYPE_DIV))
                self.advance()
            elif self.current_char == '(':
                tokens.append(Token(TYPE_LPAREN))
                self.advance()
            elif self.current_char == ')':
                tokens.append(Token(TYPE_RPAREN))
                self.advance()
            else:
                pos_start = self.pos.copy()
                char = self.current_char
                self.advance()
                return []

        return tokens, None

    def make_number(self):
        num_str = ''
        dot_count = 0

        while self.current_char != None and self.current_char in DIGITS + '.':
            if self.current_char == '.':
                if dot_count == 1: break
                dot_count += 1
                num_str += '.'
            else:
                num_str += self.current_char
            self.advance()

        if dot_count == 0:
            return Token(TYPE_INT, int(num_str))
        else:
            return Token(TYPE_FLOAT, float(num_str))



class Position:
    def __init__(self, index, line, column, fn, ftxt):
        self.index = index
        self.line = line
        self.column = column
        self.fn = fn
        self.ftxt = ftxt

    def advance(self, current_char):
        self.index += 1
        self.column += 1

        if current_char == '\n':
            self.line += 1
            self.column = 0

        return self






class Token:
    def __init__(self, type_, value=None):
        self.type = type_
        self.value = value
    
    def __repr__(self):
        if self.value: return f'{self.type}:{self.value}'
        return f'{self.type}'            
